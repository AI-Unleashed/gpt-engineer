[{"role": "system", "content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nYou will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.\nThen you will output the content of each file, with syntax below.\n(You will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.)\nMake sure that files contain all imports, types etc. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nFile syntax:\n\n```file.py/ts/html\n[ADD YOUR CODE HERE]\n```\n\nUseful to know:\nYou almost always put different classes in different files\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n"}, {"role": "system", "content": "Instructions: We are writing snake in python. MVC components split in separate files. Keyboard control.\n"}, {"role": "user", "content": "You are a super smart developer. You have been asked to make a specification for a program.\n\nThink step by step to make sure we get a high quality specification and we don't miss anything.\nFirst, be super explicit about what the program should do, which features it should have\nand give details about anything that might be unclear. **Don't leave anything unclear or undefined.**\n\nSecond, lay out the names of the core classes, functions, methods that will be necessary,\nas well as a quick comment on their purpose.\nFinally list all non-standard dependencies you'll have to use.\n\nThis specification will be used later as the basis for the implementation."}, {"role": "assistant", "content": "Specification for the Snake Game in Python using MVC architecture and keyboard control:\n\n1. Program Description:\nThe program is a classic Snake game implementation in Python using the Model-View-Controller (MVC) architecture. The game will have a snake that moves around a grid, eating food to grow in size. The game ends when the snake collides with itself or the grid boundaries. The player will control the snake using the arrow keys on the keyboard.\n\n2. Features:\n- Snake movement using arrow keys (up, down, left, right)\n- Randomly generated food on the grid\n- Snake grows in size when it eats food\n- Game over when the snake collides with itself or the grid boundaries\n- Display the current score (length of the snake)\n- Restart the game after game over\n\n3. Core Classes, Functions, and Methods:\n- `Snake`: A class representing the snake, containing its position, direction, and size.\n  - `move()`: Updates the snake's position based on its current direction.\n  - `grow()`: Increases the size of the snake.\n  - `collides_with_itself()`: Checks if the snake has collided with itself.\n  - `collides_with_boundary(width, height)`: Checks if the snake has collided with the grid boundaries.\n\n- `Food`: A class representing the food, containing its position on the grid.\n  - `generate_new_position(width, height)`: Generates a new random position for the food on the grid.\n\n- `GameModel`: A class representing the game model, containing the snake, food, and game state.\n  - `update()`: Updates the game state, including the snake's movement and collision checks.\n  - `restart()`: Resets the game state to its initial state.\n\n- `GameView`: A class representing the game view, responsible for displaying the game state.\n  - `draw(snake, food, score)`: Draws the current game state, including the snake, food, and score.\n\n- `GameController`: A class representing the game controller, responsible for handling user input and updating the model and view.\n  - `handle_key_press(key)`: Handles key press events and updates the snake's direction accordingly.\n  - `run()`: The main game loop, updating the model and view based on user input.\n\n4. Non-standard Dependencies:\n- `pygame`: A library for creating video games in Python. It will be used for handling keyboard input, drawing the game state, and managing the game loop.\n\nWith this specification, we can now proceed to implement the Snake game in Python using the MVC architecture and keyboard control."}]