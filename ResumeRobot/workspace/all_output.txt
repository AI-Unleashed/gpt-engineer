```main.py
from user_interface import UserInterface
from resume import Resume

def main():
    ui = UserInterface()
    while True:
        input_json = ui.get_input()
        resume = Resume(input_json)
        try:
            resume.validate_input()
        except ValueError as e:
            print(f"Invalid input: {e}")
            continue

        resume.generate_resume()
        ui.display_preview(resume)

        action = ui.save_or_edit(resume)
        if action == "save":
            file_name = input("Enter the file name for the resume (without extension): ")
            resume.save_resume(f"{file_name}.pdf")
            print("Resume saved successfully.")
            break
        elif action == "edit":
            continue

if __name__ == "__main__":
    main()
```

```resume.py
import json
import os
from dataclasses import dataclass
from PyPDF2 import PdfFileWriter, PdfFileReader
from jsonschema import validate, ValidationError

@dataclass
class Resume:
    input_json: str
    pdf: PdfFileWriter = None

    def validate_input(self):
        schema = {
            "type": "object",
            "properties": {
                "contact_information": {"type": "object"},
                "resume_introduction": {"type": "string"},
                "professional_experience": {"type": "array"},
                "skills": {"type": "array"},
                "education": {"type": "array"}
            },
            "required": ["contact_information", "resume_introduction", "professional_experience", "skills", "education"]
        }

        try:
            validate(json.loads(self.input_json), schema)
        except ValidationError as e:
            raise ValueError(e.message)

    def generate_resume(self):
        # Implement the logic to generate the resume in PDF format using the input JSON data.
        # For simplicity, we will use a dummy PDF file as a placeholder.
        self.pdf = PdfFileReader("dummy_resume.pdf")

    def save_resume(self, file_name: str):
        with open(file_name, "wb") as output_file:
            self.pdf.write(output_file)

    def preview_resume(self):
        # Implement the logic to preview the generated resume.
        # For simplicity, we will just return the number of pages in the PDF.
        return self.pdf.getNumPages()
```

```user_interface.py
from resume import Resume

class UserInterface:
    def get_input(self):
        input_json = input("Enter the resume data in JSON format: ")
        return input_json

    def display_preview(self, resume: Resume):
        print(f"Preview: The generated resume has {resume.preview_resume()} pages.")

    def save_or_edit(self, resume: Resume):
        while True:
            action = input("Enter 'save' to save the resume, or 'edit' to edit the input JSON: ").lower()
            if action in ["save", "edit"]:
                return action
            else:
                print("Invalid input. Please enter 'save' or 'edit'.")
```

Now we have the complete code for the main.py, resume.py, and user_interface.py files. The code should be fully functional, and you can run the main.py file to start the program.