[{"role": "system", "content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nYou will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.\nThen you will output the content of each file, with syntax below.\n(You will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.)\nMake sure that files contain all imports, types etc. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nFile syntax:\n\n```file.py/ts/html\n[ADD YOUR CODE HERE]\n```\n\nUseful to know:\nYou almost always put different classes in different files\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n"}, {"role": "system", "content": "Instructions: A python application that takes takes input from the user with dates and point form rough notes in JSON format, and returns a professional resume with the following sections:\nContact information\nResume introduction\nProfessional experience\nSkills\nEducation\n"}, {"role": "user", "content": "You are a super smart developer. You have been asked to make a specification for a program.\n\nThink step by step to make sure we get a high quality specification and we don't miss anything.\nFirst, be super explicit about what the program should do, which features it should have\nand give details about anything that might be unclear. **Don't leave anything unclear or undefined.**\n\nSecond, lay out the names of the core classes, functions, methods that will be necessary,\nas well as a quick comment on their purpose.\nFinally list all non-standard dependencies you'll have to use.\n\nThis specification will be used later as the basis for the implementation."}, {"role": "assistant", "content": "Specification for the Resume Builder Program:\n\nThe program should have the following features:\n\n1. Accept user input in JSON format containing the following sections:\n   - Contact information\n   - Resume introduction\n   - Professional experience\n   - Skills\n   - Education\n\n2. Validate the input JSON to ensure it contains all the required sections and fields.\n\n3. Generate a professional-looking resume in PDF format using the input JSON data.\n\n4. Save the generated resume as a PDF file.\n\n5. Provide an option to preview the generated resume before saving.\n\n6. Allow users to edit the input JSON and regenerate the resume.\n\nCore Classes, Functions, and Methods:\n\n1. `Resume` class: Represents the resume data and contains methods for generating and saving the resume.\n   - `__init__(self, input_json: str)`: Initialize the resume with the input JSON data.\n   - `validate_input(self)`: Validate the input JSON data.\n   - `generate_resume(self)`: Generate the resume in PDF format.\n   - `save_resume(self, file_name: str)`: Save the generated resume as a PDF file.\n   - `preview_resume(self)`: Preview the generated resume.\n\n2. `UserInterface` class: Handles user interaction, input, and output.\n   - `get_input(self)`: Get the input JSON data from the user.\n   - `display_preview(self, resume: Resume)`: Display the preview of the generated resume.\n   - `save_or_edit(self, resume: Resume)`: Ask the user if they want to save the resume or edit the input JSON.\n\n3. `main()` function: The entry point of the program, which initializes the `UserInterface` and `Resume` classes and handles the program flow.\n\nNon-standard Dependencies:\n\n1. `PyPDF2`: A library for generating and manipulating PDF files.\n2. `jsonschema`: A library for validating JSON data against a predefined schema.\n\nHere's the high-level program flow:\n\n1. The `main()` function initializes the `UserInterface` class.\n2. The `UserInterface` class gets the input JSON data from the user.\n3. The `main()` function initializes the `Resume` class with the input JSON data.\n4. The `Resume` class validates the input JSON data.\n5. The `Resume` class generates the resume in PDF format.\n6. The `UserInterface` class displays the preview of the generated resume.\n7. The `UserInterface` class asks the user if they want to save the resume or edit the input JSON.\n8. If the user chooses to save the resume, the `Resume` class saves the resume as a PDF file.\n9. If the user chooses to edit the input JSON, the program goes back to step 2."}]